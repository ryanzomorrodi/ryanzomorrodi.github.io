---
title: Observable JS for an ggplot2 user
author: Ryan Zomorrodi
format: 
  html:
    page-layout: full
---


Over the past year I have been playing around with quarto and trying to learn
more about some of its features. I have really been enjoying the fact that
quarto allows me to chain my R and python scripts into one single reproducable
document. But why should I stop there? 

The following are my notes about using objective js to make data visualization
as some one who primarily uses ggplot2.

## ggplot2

ggplot2 was built with an underlying grammar, the Grammar of Graphics. This
breaks down visualizations into 7 parts.

![](gg.png)

**Data** (`ggplot()`) - should be self-explanatory  
**Mapping** (`aes()`) - Defines relationship between data and aesthetic
attributes of layers  
**Layers** (`geom_*` or `stat_*`) - specifies graphical components displayed in 
a visualization   
**Scales** (`scale_*_*`) - sets the axes, legends, and sometimes transformations  
**Facets** (`facet_*`) - splits up data into separate panels  
**Coordinates** (`coord_*`) - determines the coordinate system used to display elements  
**Themes** (`theme*()`) - control the look and feel of the plot elements  

Note: these are one line summaries of a much better description within the
ggplot vignette, [*Introduction to ggplot2*](https://ggplot2.tidyverse.org/articles/ggplot2.html)

While this makes ggplot2 relatively easy to learn, but not all graphics 
libraries rely on this exact grammar. I will; however, try as best I can to 
translate the javascipt libraries used throughout these notes to this underlying
grammar.

## Translating to Plot.js

I know you want to become the next NYT visualization guru, but first let's try
to make some simplish, but powerful plots with Plot.js. Plot.js is build on
d3, which is the visualization library that your favorite NYT data viz wizards
use. Its syntax is quite a lot easier to translate into ggplot methods as
compared to d3 so this is where we will start.

Since, we are focused on data viz. I'm going to get my data from R and send it
over to javascript using `ojs_define()`.

```{r}
#| filename: R
ojs_define(iris = iris)
```

We can now access our data in ojs.

```{ojs}
//| filename: ojs
iris
```

### Basic scatterplot

Let's start ploting, but stick with R for a second. Let's make a classic
scatterplot.  Notice we specify three elements of the grammar of graphics and 
assume the rest.

::: {.panel-tabset}

## R  
Data: `iris`  
Mapping: `aes(x = Petal.Length, y = Petal.Width)`  
Layer: `geom_point()`  

```{r}
#| filename: R
library(ggplot2)

ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
    geom_point()
```

## Plot.js  
Data: `transpose(iris)`  
Mapping: `{x: Petal.Length, y: Petal.Width}`  
Layer: `Plot.dot()`  

```{ojs}
//| filename: ojs
Plot.plot({
  marks: [
    Plot.dot(transpose(iris), {x: "Petal.Length", y: "Petal.Width"})
  ]
})
```
:::

### Basic barplot

This is where we experience our first sort of problem. ggplot2 layers often 
calculate stats for us. In this case ggplot2 calculates a count of each of the
species and maps that to the y of each bar. Plot.js will not do this. We need to
first calculate our stat and specify it as our y. (imagine you were only able to
use `geom_col()`).

::: {.panel-tabset}

## R  
Data: `iris`  
Mapping: `aes(x = Species, fill = Species)`  
Layer: `geom_bar()` 

```{r}
#| filename: R
ggplot(iris, aes(x = Species, fill = Species)) +
    geom_bar()
```

## Plot.js  

First, we will calculate the count for each species and pass it to javascript.
We could do this in javascript really easy with Arquero, which was inspired by
dplyr, but we're learning Plot.js right now, so stay focused.  
Data: `transpose(iris)`  
Mapping: `{x: "Species", y: "n", fill: "Species"}`  
Layer: `Plot.barY()`  

```{r}
#| filename: R
iris_freq <- dplyr::count(iris, Species)
ojs_define(iris_freq = iris_freq)
```

```{ojs}
//| filename: ojs
Plot.plot({
  marks: [
    Plot.barY(transpose(iris_freq), {x: "Species", y: "n", fill: "Species"})
  ]
})
```

:::


### Temporal log-scale line plot 

Now we're going to add a scale element to our specification.

::: {.panel-tabset}

## R  
Data: `economics`  
Mapping: `aes(x = date, y = unemploy)`  
Layer: `geom_bar()`  
Scale: `scale_x_date()` and `scale_y_log10()` 

```{r}
#| filename: R
ggplot(economics, aes(x = date, y = unemploy)) +
    geom_line() + 
    scale_x_date() +
    scale_y_log10()
```

## Plot.js  

Data: `transpose(economics)`  
Mapping: `{x: "date", y: "unemploy"}`  
Layer: `Plot.line()`  
Scale: `x: {type: "time}` and `y: {type: "log"}`
```{r}
#| filename: R
ojs_define(economics = economics)
```

```{ojs}
//| filename: ojs
Plot.plot({
  x: {type: "time"},
  y: {type: "log"},
  marks: [
    Plot.line(transpose(economics), {x: "date", y: "unemploy"})
  ]}
)
```

:::


### Faceted boxplot 

This is one kind of plot that in ggplot2 is technically speaking faceted, but
without the use of a `facet_*()` function, either way it still demonstrates the 
point.

::: {.panel-tabset}

## R  

Something is a weird about the y-axis here, but we'll ignore it

Data: `iris_round`  
Mapping: `aes(x = Petal.Length)`  
Layer: `geom_boxplot()`  
Facet: `aes(group = round(Petal.Width / 0.4) * 0.4)`

```{r}
#| filename: R
ggplot(iris, aes(x = Petal.Length, group = Petal.Width)) +
    geom_boxplot()
```


## Plot.js  

Data: `transpose(iris)`  
Mapping: `{x: "Petal.Length"}`  
Layer: `Plot.boxX()`  
Facet: `transpose(iris).filter((d) => d["Petal.Length"])` and `{fy: "Petal.Width"}`

```{ojs}
//| filename: ojs
Plot.plot({
  fy: {
    reverse: true
  },
  marks: [
    Plot.boxX(transpose(iris).filter((d) => d["Petal.Length"]), {x: "Petal.Length", fy: "Petal.Width"})
  ]
})
```

:::


### Map

Projections for maps by their very nature tranform the coordinate system, so
let's see how we can use them in Plot.js.

::: {.panel-tabset}

## R  

Something is a weird about the y-axis here, but we'll ignore it

Data: `states`  
Layer: `geom_sf()`  
Coordinates: `coord_sf(crs = st_crs("ESRI:102003"))`

```{r, message = FALSE, warning = FALSE}
#| filename: R
library(sf)

states <- read_sf("https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json")
st_crs(states) <- 4326

ggplot(states) +
    geom_sf() +
    coord_sf(crs = st_crs("ESRI:102003"))
```


## Plot.js  

We have to read in our data using d3 and topojson.

Data: `statemesh`  
Layer: `Plot.geo()`  
Coordinates: `projection: "albers-usa"`

```{ojs}
//| filename: ojs
d3 = require("d3@7")
topojson = require("topojson")

us_states = d3.json("https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json")
statemesh = topojson.mesh(states, states.objects.states)

Plot.plot({
  projection: "albers-usa",
  marks: [
    Plot.geo(statemesh, {strokeOpacity: 1})
  ]
})
```

:::

## No even bother translating to D3

Okay, we're going to delve into d3. You probably get the point of Plot.js.
Fundamentally, your thought process when making a Plot.js chart is relatively
the same with slightly different syntax. But if you want to use D3 you're going
to completely rethink the way you make visualizations.

### Basic scatterplot

```{ojs}
scatterplot = {

  // Specify the chartâ€™s dimensions.
  const width = 928;
  const height = 600
  const marginTop = 20;
  const marginRight = 20;
  const marginBottom = 30;
  const marginLeft = 40;

  const data = transpose(iris);

  // Define the horizontal scale.
  const x = d3.scaleLinear()
      .domain(d3.extent(data, d => d["Petal.Length"])).nice()
      .range([marginLeft, width - marginRight]);

  // Define the vertical scale.
  const y = d3.scaleLinear()
      .domain(d3.extent(data, d => d["Petal.Width"])).nice()
      .range([height - marginBottom, marginTop]);

  // Create the container SVG.
  const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "max-width: 100%; height: auto;");

  // Add the axes.
  svg.append("g")
      .attr("transform", `translate(0,${height - marginBottom})`)
      .call(d3.axisBottom(x));

  svg.append("g")
      .attr("transform", `translate(${marginLeft},0)`)
      .call(d3.axisLeft(y));

  // Append a circle for each data point.
  svg.append("g")
    .selectAll("circle")
    .data(data)
    .join("circle")
      .filter(d => d["Petal.Width"])
      .attr("cx", d => x(d["Petal.Length"]))
      .attr("cy", d => y(d["Petal.Width"]))
      .attr("r", 3);

  return svg.node();
}
```

### Basic barplot
```{ojs}
barplot = {
  // Declare the chart dimensions and margins.
  const width = 928;
  const height = 600
  const marginTop = 20;
  const marginRight = 20;
  const marginBottom = 30;
  const marginLeft = 40;

  const data = transpose(iris_freq);

  // Declare the x scale.
  const x = d3.scaleBand()
      .domain(d3.groupSort(data, ([d]) => -d.n, (d) => d.Species)) // descending frequency
      .range([marginLeft, width - marginRight])
      .padding(0.1);
  
  // Declare the y scale.
  const y = d3.scaleLinear()
      .domain([0, d3.max(data, (d) => d.n)])
      .range([height - marginBottom, marginTop]);

  // Declare the fill scale.
  const fillScale = d3.scaleOrdinal()
    .domain(data.map(d => d.Species))
    .range(["#1f77b4", "#ff7f0e", "#2ca02c"]);

  // Create the SVG container.
  const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "max-width: 100%; height: auto;");

  // Add a rect for each bar.
  svg.append("g")
    .selectAll()
    .data(data)
    .join("rect")
      .attr("x", (d) => x(d.Species))
      .attr("y", (d) => y(d.n))
      .attr("height", (d) => y(0) - y(d.n))
      .attr("width", x.bandwidth())
      .attr("fill", (d) => fillScale(d.Species));


  // Add the x-axis and label.
  svg.append("g")
      .attr("transform", `translate(0,${height - marginBottom})`)
      .call(d3.axisBottom(x).tickSizeOuter(0));

  // Add the y-axis and label, and remove the domain line.
  svg.append("g")
      .attr("transform", `translate(${marginLeft},0)`)
      .call(d3.axisLeft(y).tickFormat((y) => (y * 100).toFixed()))
      .call(g => g.select(".domain").remove())
      .call(g => g.append("text")
          .attr("x", -marginLeft)
          .attr("y", 10)
          .attr("fill", "currentColor")
          .attr("text-anchor", "start")
          .text("â†‘ n"));

  // Return the SVG element.
  return svg.node();
}
```


### Temporal log-scale line plot 


```{ojs}
lineplot = {
  // Declare the chart dimensions and margins.
  const width = 928;
  const height = 600
  const marginTop = 20;
  const marginRight = 20;
  const marginBottom = 30;
  const marginLeft = 40;

  const data = transpose(economics);

  // Declare the x (horizontal position) scale.
  const x = d3.scaleUtc()
      .domain(d3.extent(data, d => new Date(d.date)))
      .range([marginLeft, width - marginRight]);

  // Declare the y (vertical position) scale.
  const y = d3.scaleLog()
      .domain(d3.extent(data, d => d.unemploy))
      .range([height - marginBottom, marginTop]);

  // Declare the line generator.
  const line = d3.line()
      .x(d => x(new Date(d.date)))
      .y(d => y(d.unemploy));

  // Create the SVG container.
  const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "max-width: 100%; height: auto; height: intrinsic;");

  // Add the x-axis.
  svg.append("g")
      .attr("transform", `translate(0,${height - marginBottom})`)
      .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0));

  // Add the y-axis, remove the domain line, add grid lines and a label.
  svg.append("g")
      .attr("transform", `translate(${marginLeft},0)`)
      .call(d3.axisLeft(y).ticks(height / 40))
      .call(g => g.select(".domain").remove())
      .call(g => g.selectAll(".tick line").clone()
          .attr("x2", width - marginLeft - marginRight)
          .attr("stroke-opacity", 0.1))
      .call(g => g.append("text")
          .attr("x", -marginLeft)
          .attr("y", 10)
          .attr("fill", "currentColor")
          .attr("text-anchor", "start")
          .text("â†‘ Daily close ($)"));

  // Append a path for the line.
  svg.append("path")
      .attr("fill", "none")
      .attr("stroke", "steelblue")
      .attr("stroke-width", 1.5)
      .attr("d", line(data));

  return svg.node();
}
```

### Faceted boxplot 

This is a decent bit of work, you gotta bin the observations, calculate the IQR,
range, and outliers, and create all the boxes, lines, and circles. 

### Map

```{ojs}
us = d3.json("https://cdn.jsdelivr.net/npm/us-atlas@3/counties-albers-10m.json")

nation = topojson.feature(us, us.objects.nation)
states = topojson.mesh(us, us.objects.states)
```


```{ojs}
map = {
  // Declare the chart dimensions and margins.
  const width = 975;
  const height = 610;

  // Construct a path generator.
  const path = d3.geoPath();

  // Create the SVG container.
  const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "width: 100%; height: auto; height: intrinsic;");

  // Create the cartographic background layers.
  svg.append("path")
      .datum(nation)
      .attr("fill", "#ddd")
      .attr("d", path);

  // Create state outlines.
  svg.append("path")
      .datum(states)
      .attr("fill", "none")
      .attr("stroke", "white")
      .attr("stroke-linejoin", "round")
      .attr("d", path);

  return svg.node();
}
```


## Cool maps

### Vector map

```{ojs}
election = d3.csv("https://raw.githubusercontent.com/tonmcg/US_County_Level_Election_Results_08-20/refs/heads/master/2020_US_County_Level_Presidential_Results.csv")

counties = {
  const counties = topojson.feature(us, us.objects.counties).features;
  const _election = new Map(election.map((d) => [d.fips, d]));
  counties.forEach(county => {
    county.properties.margin2020 = +_election.get(county.id)?.margin2020;
    county.properties.votes = +_election.get(county.id)?.votes;
  });
  return counties;
}
```


```{ojs}
Plot.plot({
  projection: "albers-usa",
  length: {type: "sqrt", transform: Math.abs},
  marks: [
    Plot.geo(states, {strokeWidth: 0.5}),
    Plot.geo(nation),
    Plot.vector(
      counties,
      Plot.centroid({
        anchor: "start",
        length: (d) => d.properties.margin2020 * d.properties.votes,
        stroke: (d) => d.properties.margin2020 > 0 ? "red" : "blue",
        rotate: (d) => d.properties.margin2020 > 0 ? 60 : -60
      })
    )
  ]
})
```